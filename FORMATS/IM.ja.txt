/* Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008	-*- coding: utf-8; -*-
     National Institute of Advanced Industrial Science and Technology (AIST)
     Registration Number H15PRO112
   Copyright (C) 2012  Kenichi Handa <handa@gnu.org>
   See the end for copying conditions.  */

/* sections for example found in English vesion omitted */

/***ja

@page mdbIM インプットメソッド

@section im-description 説明

m17n ライブラリは、m17n データベースから動的にロードできる入力メソッド
ドライバを提供している。(@ref m17nInputMethod 参照。 @latexonly
(P.\pageref{group__m17nInputMethod}) @endlatexonly).

ここでは入力メソッド定義のデータフォーマットを説明する。

@section im-format 文法と意味

以下のデータフォーマットによって入力メソッドが定義される。ドライバはファ
イルやストリームから定義をロードし、プロパティリストの形式に変換する。

@verbatim
INPUT-METHOD ::=
    IM-DECLARATION ? DESCRIPTION ? TITLE ?
     VARIABLE-LIST ? COMMAND-LIST ?  MODULE-LIST ?
     MACRO-LIST ? MAP-LIST ? STATE-LIST ?

IM-DECLARATION ::= '(' 'input-method' LANGUAGE NAME EXTRA-ID ? VERSION ? ')'
VERSION ::= '(' 'version' VERSION-NUMBER ')'
DESCRIPTION ::= '(' 'description' [ MTEXT-OR-GETTEXT | nil] ')'
VARIABLE-LIST ::= '(' 'variable' VARIABLE-DECLARATION * ')'
COMMAND-LIST ::= '(' 'command' COMMAND-DECLARATION * ')'
TITLE ::= '(' 'title' TITLE-TEXT ')'

VARIABLE-DECLARATION ::=
    '(' VAR-NAME [ MTEXT-OR-GETTEXT | nil ] VALUE VALUE-CANDIDATE * ')'

COMMAND-DECLARATION ::=
    '(' CMD-NAME [ MTEXT-OR-GETTEXT | nil ] KEYSEQ * ')'

MTEXT-OR-GETTEXT ::=
    [ MTEXT | '(' '_' MTEXT ')']

LANGUAGE ::= SYMBOL
NAME ::= SYMBOL
EXTRA-ID ::= SYMBOL
VERSION ::= MTEXT
IM-DESCRIPTION ::= MTEXT
VAR-NAME ::= SYMBOL
VAR-DESCRIPTION ::= MTEXT
VALUE ::= MTEXT | SYMBOL | INTEGER
VALUE-CANDIDATE ::= VALUE | '(' RANGE-FROM RANGE-TO ')'
RANGE-FROM ::= INTEGER
RANGE-TO ::= INTEGER
CMD-NAME ::= SYMBOL
CMD-DESCRIPTION ::= MTEXT
TITLE-TEXT ::= MTEXT
@endverbatim

@c IM-DECLARATION はこの入力メソッドの言語と名前を指定する。

@c LANGUAGE が @c t の場合、この入力メソッドは複数の言語で利用される。

@c NAME が @c nil の場合、この入力メソッドは単独で用いられるものではな
く、他の入力メソッドから利用することを想定している。この場合、入力メ
ソッドを特定するために @c EXTRA-ID が必要である。

@c VERSION はこの入力メソッドが必要とする m17n ライブラリの最小バージョ
ンを指定する。フォーマットは "XX.YY.ZZ" であり、XX はメジャーバージョ
ン、 YY はマイナーバージョン、ZZ はパッチレベルを表す。

@c DESCRIPTION はこの入力メソッドの説明を @c MTEXT-OR-GETTEXT で指定す
る。もしこれが２番目の形式を取っていれば、 @c MTEXT は現在のロケールに
従って "gettext" によって翻訳される（翻訳文が提供されている場合）。

@c TITLE-TEXT はこの入力メソッドが有効な時、スクリーン上に表示されるテ
キストである。

"global.mim" という特別なファイルがあり、共通する変数やコマンドが定義さ
れている。入力メソッドドライバは毎回このファイルをロードし、他の入力メ
ソッドはここで定義された変数やコマンドを継承できる。

@c VARIABLE-DECLARATION はこの入力メソッドで使用される変数を宣言する。
変数をデフォルト値に初期化したり、ユーザがカスタマイズしたりする場合に
は、ここで宣言されなくてはならない。この宣言は二通りに利用される。一つ
めは新しい変数を導入するためであり、この場合 @c VALUE は省略できない。
もう一つは "global.mim" で宣言された変数を継承し、違ったデフォルト値を
指定したり、この入力メソッド用にカスタマイズ可能にしたりするためである。
この場合には @c VALUE は省略できる。

@c COMMAND-DECLARATION はこの入力メソッドで使用されるコマンドを宣言する。
コマンドをデフォルトキーシーケンスに割り当てたり、ユーザがカスタマイズ
したりする場合には、ここで宣言されなくてはならない。@c
VARIABLE-DECLARATION 同様、この宣言は二通りに利用される。一つめは新しい
コマンドを導入するためであり、この場合 @c KEYSEQ は省略できない。もう一
つは "global.mim" で宣言されたコマンドを継承し、違ったキーバインディン
グを指定したり、この入力メソッド用にカスタマイズ可能にしたりするためで
ある。この場合には @c KEYSEQ は省略できる。

@verbatim
MODULE-LIST ::= '(' 'module' MODULE * ')'

MODULE ::= '(' MODULE-NAME FUNCTION * ')'

MODULE-NAME ::= SYMBOL

FUNCTION ::= SYMBOL
@endverbatim

各 @c MODULE は外部モジュール (動的ライブラリ) の名前とそのモジュールが
公開している関数名を宣言する。@c FUNCTION が "init" という名前であれば、
この入力メソッド用の入力コンテクストが生成される際に、デフォルトの引数
(@c CALL の節参照) のみとともに呼ばれる。 @c FUNCTION が "fini" という
名前を持てば, 入力コンテクストが破壊される際に、デフォルトの引数のみと
ともに呼ばれる。

@verbatim
MACRO-LIST ::=  MACRO-INCLUSION ? '(' 'macro' MACRO * ')' MACRO-INCLUSION ?

MACRO ::= '(' MACRO-NAME MACRO-ACTION * ')'

MACRO-NAME ::= SYMBOL

MACRO-ACTION ::= ACTION

TAGS ::= `(` LANGUAGE NAME EXTRA-ID ? `)`

MACRO-INCLUSION ::= '(' 'include' TAGS 'macro' MACRO-NAME ? ')'

@endverbatim

@c MACRO-INCLUSION は、@c TAGS で指定される他の入力メソッドからマクロを
読み込む。@c MACRO-NAME が与えられていなければ、全てのマクロを読む。

@verbatim
MAP-LIST ::= MAP-INCLUSION ? '(' 'map' MAP * ')' MAP-INCLUSION ?

MAP ::= '(' MAP-NAME RULE * ')'

MAP-NAME ::= SYMBOL

RULE ::= '(' KEYSEQ MAP-ACTION * ')'

KEYSEQ ::= MTEXT | '(' [ SYMBOL | INTEGER ] * ')'

MAP-INCLUSION ::= '(' 'include' TAGS 'map' MAP-NAME ? ')'

@endverbatim

入力メソッドがそれ単体で利用されることがなく常に他の入力メソッドに読
み込まれて用いられる場合には、@c MAP-LIST は省略できる。

@c MAP-NAME 定義中の @c SYMBOL は、 @c t あるいは @c nil であってはな
らない。

@c KEYSEQ 定義中の @c MTEXT は、キーボードから生成できる文字で構成され
る。すなわち @c MTEXT は通常 ASCII 文字のみを含む。しかし、入力メソッド
がたとえば西ヨーロッパ用キーボードを使うことを想定したものであれば、@c
MTEXT は Latin-1 文字を含んでもよい。

@c KEYSEQ 定義中の @c SYMBOL は、関数 minput_event_to_key () の戻り値で
なくてはならない。X ウィンドウシステムの元では、 @c xev コマンドを用い
て値を簡単にチェックできる。たとえば、 リターンキー、バックスペースキー、
キーパッドの0のキーなどは、それぞれ@c (Return) , @c (BackSpace) , @c
(KP_0) としてあらわされる。シフト、コントロール、メタ、アルト、スーパー、
ハイパーも押されている場合には、それぞれS- , C- , M- , A- , s- , H- が
前にこの順に置かれる。したがって "リターンキーをシフトしてメタしてハイ
パーしたもの" は@c (S-M-H-Return) である。"a をシフト" から "z をシフト
" までは、単に A から Z として表されることに注意。したがって、 "a をシ
フトしてメタしてハイパーしたもの" は @c (M-H-A) となる。

@c KEYSEQ 定義中の @c INTEGER は、有効な文字コードでなくてはならない。

@c MAP-INCLUSION は、@c TAGS で指定される他の入力メソッドからマップを読
み込む。@c MAP-NAME が与えられていなければ、全てのマップを読む。

@verbatim
MAP-ACTION ::= ACTION

ACTION ::= INSERT | DELETE | SELECT | MOVE | MARK
           | SHOW | HIDE | PUSHBACK | POP | UNDO 
	   | COMMIT | UNHANDLE | SHIFT | CALL
	   | SET | IF | COND | '(' MACRO-NAME ')'

PREDEFINED-SYMBOL ::=
    '@0' | '@1' | '@2' | '@3' | '@4'
    | '@5' | '@6' | '@7' | '@8' | '@9'
    | '@<' | '@=' | '@>' | '@-' | '@+' | '@[' | '@]'
    | '@@'
    | '@-0' | '@-N' | '@+N'
@endverbatim

@verbatim
STATE-LIST ::= STATE-INCUSION ? '(' 'state' STATE * ')'  STATE-INCUSION ?

STATE ::= '(' STATE-NAME [ STATE-TITLE-TEXT ] BRANCH * ')'

STATE-NAME ::= SYMBOL

STATE-TITLE-TEXT ::= MTEXT

BRANCH ::= '(' MAP-NAME BRANCH-ACTION * ')'
	   | '(' nil BRANCH-ACTION * ')'
	   | '(' t BRANCH-ACTION * ')'

STATE-INCLUSION ::= '(' 'include' TAGS 'state' STATE-NAME ? ')'
@endverbatim

入力メソッドがそれ単体で利用されることがなく常に他の入力メソッドに読
み込まれて用いられる場合には、@c STATE-LIST は省略できる。

@c STATE-INCLUSION は、@c TAGS で指定される他の入力メソッドからステート
を読み込む。@c STATE--NAME が与えられていなければ、すべてのステートを読
む。

@c STATE-TITLE-TEXT は、もし指定されていれば、入力メソッドがこの
状態にある時スクリーン上に表示されるテキストである。省略された場合には
@c TITLE-TEXT が用いられる。

@c BRANCH の第一の形式では、@c MAP-NAME は @c MAP に現われるものでなく
てはならない。この場合、@c MAP-NAME の @c KEYSEQ の一つに合致するキー列
がタイプされれば、 @c BRANCH-ACTION が実行される。

@c BRANCH の第二の形式では、その時点の状態のいずれの @c BRANCH にも合致
しないキー列がタイプされれば、@c BRANCH-ACTIONが実行される。

@c nil で始まる @c BRANCH がなく、入力されたキー列がその時点でのいずれの
@c BRANCH にも合致しない場合には、入力メソッドは初期状態に遷移する。

@c BRANCH の第三の形式では、その状態に移動した時点で @c BRANCH-ACTION
が実行される。もし初期状態であれば、入力メソッドの入力コンテクストを生
成した時点で @c BRANCH-ACTION を実行する。

@verbatim
BRANCH-ACTION ::= ACTION
@endverbatim

入力メソッドはシンボルのリストを二つ持つ。

<ul>
<li> マーカリスト

マーカは preediting テキスト中での文字位置を示すシンボルである。@c
MARK アクションはマーカを特定の位置に設定する。@c MOVE と @c DELETE ア
クションはマーカの位置を参照する。

<li> 変数リスト

変数は整数の値を持つシンボルである。値は@c SET アクションによって設定さ
れ、@c SET, @c INSERT, @c IF に参照される。すべての変数の初期値は（暗黙
に） 0 である。

</ul>

各 @c PREDEFINED-SYMBOL はマーカとして用いられた場合特別な意味を持つ。

<ul>
<li> @c @@0, @c @@1, @c @@2, @c @@3, @c @@4, @c @@5, @c @@6, @c @@7, @c @@8, @c @@9

それぞれ 0 番目から 9 番目の位置

<li> @c @@<, @c @@=, @c @@>

最初の、今の、最後の位置

<li> @c @@-, @c @@+

前の、次の位置

<li> @c @@[, @c @@]

候補リストが変化する際の前と次の位置
</ul>

@c PREDEFINED-SYMBOL のいくつかは、 @c SELECT アクション中で候補のイン
デックスとして用いられた際特別な意味を持つ。

<ul>
<li> @c @@<, @c @@=, @c @@>

現在の候補グループ中での最初の、今の、最後の候補

<li> @c @@-

前候補。今の候補が今の候補グループ中での最初のものであれば、前の候補グ
ループの最後の候補。

<li> @c @@+

次候補。今の候補が今の候補グループ中での最後のものであれば、次の候補グ
ループの最初の候補。

<li> @c @@[, @c @@]

それぞれ前と後の候補グループ中で、今の候補と同じ候補インデックスを持つ
もの。
</ul>

また、これも特別な意味を持つ。

<ul>
<li> @c @@@

その時点で処理されているキーの数。

</ul>

以下はサラウンドテキスト処理に用いられる。

<ul>
<li> @c @@-0

サラウンドテキストがサポートされていれば -1 、そうでなければ -2 。

<li> @c @@-N

ここで @c N は正の整数である。この変数の値は、プリエデット中の現在の位
置から @c N 文字前の文字である。もしプリエディット中で先行する文字がM
(M<N) 文字しかなければ、その値は入力スポットから数えて (N-M) 文字前の文
字となる。@c delete アクションの引数として用いられた場合、この変数は削
除する文字数を指定する。

<li> @c @@+N

ここで @c N は正の整数である。この変数の値は、プリエデット中の現在の位
置から @c N 文字後の文字である。もしプリエディット中で後続する文字がM
(M<N) 文字しかなければ、その値は入力スポットから数えて (N-M) 文字後の文
字となる。@c delete アクションの引数として用いられた場合、この変数は削
除する文字数を指定する。

</ul>

各アクションの引数と振舞いは以下の通り。

@verbatim
INSERT ::= '(' 'insert' MTEXT ')'
           | MTEXT
	   | INTEGER
           | '(' 'insert' SYMBOL ')'
           | '(' 'insert' '(' CANDIDATES * ')' ')'
           | '(' CANDIDATES * ')' 

CANDIDATES ::= MTEXT | '(' MTEXT * ')'
@endverbatim

第一、第二の形式は @c MTEXT を現在の位置の前に挿入する。

第三の形式は、文字 @c INTEGER を現在の位置の前に挿入する。

第四の形式は、@c SYMBOL を変数として扱い、その値が正しい文字コードであ
れば現在の位置の前に挿入する。

第五、第六の形式では、@c CANDIDATES は候補グループを表し、@c
CANDIDATES の各要素が候補を表す。つまり@c CANDIDATES が M-text であれば、
候補はそのM-text 中の文字であり、@c CANDIDATES が M-text のリストであれ
ば、候補はそれらの M-text である。

これらの形式は現在の位置の直前に最初の候補を挿入する。挿入された文字列
には、候補のリストと現在選択されている候補を指す情報が付加されている。

挿入によってマーカの位置は自動的に変更される。

@verbatim
DELETE ::= '(' 'delete' SYMBOL ')'
           | '(' 'delete' INTEGER ')'
@endverbatim

第一の形式は @c SYMBOL をマーカとして、マーカと現在の位置の間の文字を
削除する。

第二の形式は @c INTEGER を文字位置として、その文字位置と現在の位置の間
の文字を削除する。

削除によってマーカの位置は自動的に変更される。

@verbatim
SELECT ::= '(' 'select' PREDEFINED-SYMBOL ')'
           | '(' 'select' INTEGER ')'
	   | '(' 'select' SYMBOL ')'
@endverbatim

このアクションはまず、現在の位置の直前の文字が、候補リストが付加されて
いる文字列に属すかどうかを調べる。そうであれば、その文字列を引数によっ
て指定された候補に入れ換える。

第一の形式では @c PREDEFINED-SYMBOL を前述の候補インデックスとして扱い、
それによって候補リスト中の新しい候補が指定される。

第二の形式では @c INTEGER は候補インデックスであり、候補リスト中の新し
い候補を指定する。

第三の形式では @c SYMBOL は整数の値を持たなければならず、その値が候補イ
ンデックスとして取り扱われる。

@verbatim
SHOW ::= '(show)'
@endverbatim

このアクションは、入力メソッドドライバに現在の位置の前にある文字列に付
加されている候補リストを示すように指示する。

@verbatim
HIDE ::= '(hide)'
@endverbatim

このアクションは、入力メソッドドライバに現在示されている候補リストを隠
すように指示する。

@verbatim
MOVE ::= '(' 'move' SYMBOL ')'
         | '(' 'move' INTEGER ')'
@endverbatim

第一の形式は @c SYMBOL をマーカとして、それを新しい現在の位置とする。

第二の形式は @c INTEGER を文字位置として、その位置を新しい現在の位置と
する。

@verbatim
MARK ::= '(' 'mark' SYMBOL ')'
@endverbatim

このアクションは @c SYMBOL をマーカとして、それを現在の位置に設定する。
@c SYMBOL は @c PREDEFINED-SYMBOL であってはならない。

@verbatim
PUSHBACK :: = '(' 'pushback' INTEGER ')'
              | '(' 'pushback' KEYSEQ ')'
@endverbatim

第一の形式は、@c INTEGER の値が正ならば最新の @c INTEGER 個のキーイベン
トをイベントキューに差し戻す。0 ならばすべてのキーイベントを差し戻す。

第二の形式は、@c KEYSEQ 中のキーをイベントキューに差し戻す。

@verbatim
POP ::= '(' 'pop' ')'
@endverbatim

このアクションはまだ処理されていない最初のイベントをイベントキューから
取り出し破棄する。

@verbatim
UNDO :: = '(' 'undo' [ INTEGER | SYMBOL ] ')'
@endverbatim

引数が無い場合、このアクションは最新の二つのキーイベント、すなわちこの
コマンドによって引き起こされたものとその直前のもの、をキャンセルする。

整数値の引数 NUM がある場合、それは正か負であり 0 であってはならない。
正ならば最新のものから数えて NUM 個目のイベントをキャンセルする。負なら
ば最新の(- NUM) 個のイベントをキャンセルする。

シンボルの引数がある場合、それは整数に帰着されなくてはならず、その値が
上記の正数値引数の場合と同様に取り扱われる。

@verbatim
COMMIT :: = '(commit)'
@endverbatim

このアクションは現在の preediting テキストをコミットする。

@verbatim
UNHANDLE :: = '(unhandle)'
@endverbatim

このアクションは現在の preediting テキストをコミットし、最新のキーを未
処理として返す。

@verbatim
SHIFT :: = '(' 'shift' STATE-NAME ')'
@endverbatim

@c STATE-NAME が @c t ならば、このアクションは現在の状態を一つ前の状態
に遷移させる。そうでなければ @c STATE-NAME で表される状態に遷移させる。
後者の場合には、@c STATE-NAME は @c STATE-LIST に現われるものでなくては
ならない。

@verbatim
CALL ::= '(' 'call' MODULE-NAME FUNCTION ARG * ')'

ARG ::= INTEGER | SYMBOL | MTEXT | PLIST
@endverbatim

このアクションは外部モジュール @c MODULE-NAME の関数 @c FUNCTION を呼
ぶ。@c MODULE-NAME と @c FUNCTION は @c MODULE-LIST に現われるものでな
くてはならない。

関数は (#MPlist *) 型の引数とともに呼ばれる。最初の要素のキーは #Mt で
あり、その値は#MInputContext 型のオブジェクトへのポインタである。第二
の要素のキーは#Msymbol であり、値は現在の状態名である。 @c ARGs は三つ
目以降の要素の値として用いられる。それらの要素のキーは自動的に決定され
る。@c ARG が整数値ならば対応するキーは #Minteger であり、@c ARG がシ
ンボルならば、対応するキーは #Msymbol などのように。

関数は NULL を返すか、または行うべきアクションのリストを表す (#MPlist
*) 型の値を返さなくてはならない。

@verbatim
SET ::= '(' CMD SYMBOL1 EXPRESSION ')'

CMD ::= 'set' | 'add' | 'sub' | 'mul' | 'div'

EXPRESSION ::= INTEGER | SYMBOL2 | '(' OPERAND EXPRESSION * ')'

OPERAND ::= '+' | '-' | '*' | '/' | '|' | '&' | '!'
            | '=' | '<' | '>' | '<=' | '>='

@endverbatim

このアクションは @c SYMBOL1 と @c SYMBOL2 を変数として、@c SYMBOL1 の
値を以下のように設定する。

@c CMD が 'set' ならば、@c SYMBOL1 の値を @c EXPRESSION の値に設定する。

@c CMD が 'add' ならば、@c SYMBOL1 の値を @c EXPRESSION の値だけ増やす。

@c CMD が 'sub' ならば、@c SYMBOL1 の値を @c EXPRESSION の値だけ減らす。

@c CMD が 'mul' ならば、@c SYMBOL1 の値を @c EXPRESSION の値を掛けたも
のにする。

@c CMD が 'div' ならば、@c SYMBOL1 の値を @c EXPRESSION の値で割ったも
のにする。

@verbatim
IF ::= '(' CONDITION ACTION-LIST1 ACTION-LIST2 ? ')'

CONDITION ::= [ '=' | '<' | '>' | '<=' | '>=' ] EXPRESSION1 EXPRESSION2

ACTION-LIST1 ::= '(' ACTION * ')'

ACTION-LIST2 ::= '(' ACTION * ')'
@endverbatim

このアクションは、 @c CONDITION が真であれば @c ACTION-LIST1 を実行し、
そうでなければ @c ACTION-LIST2 を (もしあれば) 実行する。

@c SYMBOL1 と @c SYMBOL2 は変数として扱われる。

@verbatim
COND ::= '(' 'cond' [ '(' EXPRESSION ACTION * ') ] * ')'
@endverbatim

このアクションは対応する @c EXPRESSION が 0 でない値をとる最初のアクショ
ン @c ACTION を実行する。

@ifnot FOR-MAN

@section im-example1 EXAMPLE 1

この例はダイアクリティカルマーク（アキュートやセディラ）付きのラテン文
字を入力するためものである。例えば以下のようにタイプすることで:
@verbatim
    Comme'die-Franc,aise, chic,,
@endverbatim
以下が入力できる。
@if FOR-HTML
@verbatim
    Commédie-Française, chic,
@endverbatim
@endif
@if FOR-LATEX
@latexonly
\hskip5mm\texttt{\footnotesize Comm\'{e}die-Fran\c{c}aise, chic,}
@endlatexonly
@endif

入力メソッドの定義は以下のようにとても単純で、すべてのラテン文字をサポー
トとするように変更するのも簡単である。

@if FOR-HTML
@verbatim
(title "latin-postfix")
(map
 (trans
  ("a'" ?á) ("e'" ?é) ("i'" ?í) ("o'" ?ó) ("u'" ?ú) ("c," ?ç)
  ("A'" ?Á) ("E'" ?É) ("I'" ?Í) ("O'" ?Ó) ("U'" ?Ú) ("C," ?Ç)
  ("a''" "a'") ("e''" "e'") ("i''" "i'") ("o''" "o'") ("u''" "u'")
  ("c,," "c,")
  ("A''" "A'") ("E''" "E'") ("I''" "I'") ("O''" "O'") ("U''" "U'")
  ("C,," "C,")))
(state
 (init
  (trans)))
@endverbatim
@endif
@if FOR-LATEX
@latexonly
\texttt{\footnotesize
\hskip2mm(title "latin-postfix")\\
\hskip2mm(map\\
\hskip4mm (trans\\
\hskip6mm  ("a'" ?\'{a}) ("e'" ?\'{e}) ("i'" ?\'{i}) ("o'" ?\'{o})
("u'" ?\'{u}) ("c," ?\c{c})\\
\hskip6mm  ("A'" ?\'{A}) ("E'" ?\'{E}) ("I'" ?\'{I}) ("O'" ?\'{O})
("U'" ?\'{U}) ("C," ?\c{C})\\
\hskip6mm  ("a''" "a'") ("e''" "e'") ("i''" "i'") ("o''" "o'") ("u''" "u'")\\
\hskip6mm  ("c,," "c,")\\
\hskip6mm  ("A''" "A'") ("E''" "E'") ("I''" "I'") ("O''" "O'") ("U''" "U'")\\
\hskip6mm  ("C,," "C,")))\\
\hskip2mm(state\\
\hskip4mm (init\\
\hskip6mm  (trans)))}
@endlatexonly
@endif

@section im-example2 EXAMPLE 2

この例は C-u に続けて４桁の１６進コードをタイプすることでユニコード文字
を入力するもである。たとえば以下のようにタイプすると ("^u" は
Control-u):
@verbatim
    ^u2190^u2191^u2192^u2193
@endverbatim
以下（矢印シンボル）が入力できる:
@if FOR-LATEX
@verbatim
    $\leftarrow \uparrow \rightarrow \downarrow
@endverbatim
@endif
@if FOR-HTML
@verbatim
    ←↑→↓
@endverbatim
@endif

以下がその入力メソッドの定義である。コマンド @c SET と @c IF を利用し
ている。
@verbatim
(title "UNICODE")
(map
 (starter
  ((C-U) "U+"))
 (hex
  ("0" ?0) ("1" ?1) ... ("9" ?9) ("a" ?A) ("b" ?B) ... ("f" ?F)))
(state
 (init
  (starter (set code 0) (set count 0) (shift unicode)))
 (unicode
  (hex (set this @-)
       (< this ?A
	  ((sub this 48))
	  ((sub this 55)))
       (mul code 16) (add code this)
       (add count 1)
       (= count 4
	  ((delete @<) (insert code) (shift init))))))
@endverbatim

@section im-example3 EXAMPLE 3

この例は、ピンインをタイプして中国語を入力するものである。
@if FOR-HTML
例えば以下のようにタイプすると:
@verbatim
    nihaobei2jing2
@endverbatim
以下が入力できる:
@verbatim
    你好北京
@endverbatim

以下がその入力メソッドの定義である。コマンド @c CANDIDATE と @c SELECT
を利用している。これは単なる例で、例えば Backspace のような重要なキー
の処理は省いてある。

@verbatim
(title "拼")

(map
 ;; The initial character of Pinyin.
 (starter
  ("a") ("b") ... ("h") ("j") ... ("t") ("w") ("x") ("y") ("z"))

 ;; Big table of Pinyin vs the corresponding Chinese characters.
 (pinyin
  ...
  ("bei" ("被北备背悲辈杯倍贝碑" ...))
  ("hao" ("好号毫豪浩耗皓嚎昊郝" ...))
  ("jing" ("经京精境警竟静惊景敬" ...))
  ("ni" ("你呢尼泥逆倪匿拟腻妮" ...))
  ...)
 ;; Typing 1, 2, ..., 0 selects the 0th, 1st, ..., 9th candidate.
 (choose
  ("1" (select 0)) ("2" (select 1)) ... ("9" (select 8)) ("0" (select 9))))

(state
 (init
  ;; When an initial character of Pinyin is typed, re-handle it in
  ;; "main" state.  Anything else is just produced as is.
  (starter (show) (pushback 1) (shift main)))

 (main
  ;; When a complete Pinyin sequence is typed, shift to "select" state
  ;; to allow users to select one from the candidates.
  (pinyin (shift select))

  ;; When anything else is typed, produce the current candidate (if
  ;; any), and re-handle the last input in "init" state.
  (nil (hide) (shift init)))

 (select
  ;; When a number is typed, select the corresponding canidate,
  ;; produce it, and shift to "init" state.
  (choose (hide) (shift init))

  ;; When anything else is typed, produce the current candidate,
  ;; and re-handle the last input in "init" state.
  (nil (hide) (shift init))))
@endverbatim

@elseif FOR-LATEX
@latexonly
\begin{center}
\fbox{This example is readable only in the documentation of HTML version.}
\end{center}
@endlatexonly
@endif

@endif

@section im-seealso SEE ALSO

@ref mim-list "Input Methods provided by the m17n database",
@ref mdbGeneral "mdbGeneral(5)"
*/

/* 
Copyright (C) 2003, 2004, 2005
  National Institute of Advanced Industrial Science and Technology (AIST)
  Registration Number H15PRO112

This file is part of the m17n database; a sub-part of the m17n
library.

The m17n library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public License
as published by the Free Software Foundation; either version 2.1 of
the License, or (at your option) any later version.

The m17n library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with the m17n library; if not, write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301, USA.
*/
